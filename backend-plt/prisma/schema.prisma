generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  avatar    String
  username  String   @unique
  fullname String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
  Store Store[]
  StoreManager StoreManager[]
  Employee Employee[]
  Customer Customer[]
  ProductType ProductType[]
  Product Product[]
}

model Employee {
  id        String   @id @default(cuid())
  userId    String
  storeId   String
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
  shifts    ShiftHandover[]

  @@map("employees")
}

model Customer {
  id        String   @id @default(cuid())
  userId    String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])

  @@map("customers")
}

model Store {
  id        String   @id @default(cuid())
  storeCode String @unique
  name      String   
  address   String
  phone     String?
  email     String?
  description String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  
  @@map("stores")
  managers  StoreManager[]
  orders    Order[]
  products  Product[]
  employees Employee[]
  customers Customer[]
  shifts    ShiftHandover[]
  productTypes ProductType[]
}

model StoreManager {
  id        String   @id @default(cuid())
  storeId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store     Store    @relation(fields: [storeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("store_managers")
}

model ProductType {
  id        String   @id @default(cuid())
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store     Store    @relation(fields: [storeId], references: [id])

  ownerId String
  owner   User     @relation(fields: [ownerId], references: [id])

  products  Product[]

  @@map("product_types")
}

model Product {
  id        String   @id @default(cuid())
  productCode String @unique
  name      String
  description String?
  imageUrl  String?

  price     Float
  retailPrice    Float
  wholesalePrice Float
  costPrice      Float
  stock     Int      @default(0)
  minStock       Int
  unit           String
  status         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId  String
  owner    User     @relation(fields: [ownerId], references: [id])
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  
  categories ProductType[]
  orderItems OrderItem[]
  images    ProductImage[]
  inventoryTransactions InventoryTransaction[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model InventoryTransaction {
  id        String   @id @default(cuid())
  productId String
  quantity  Int
  type      String   // e.g., "ADD", "REMOVE"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id])

  @@map("inventory_transactions")
}

model Order {
  id        String   @id @default(cuid())
  storeId   String
  userId    String
  total     Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store     Store    @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ShiftHandover {
  id                String   @id @default(cuid())
  storeId          String
  employeeId       String
  shiftStartTime   DateTime
  shiftEndTime     DateTime
  revenueCollected Decimal
  expenses         Decimal
  amountHandedOver Decimal
  notes            String?
  numberOfItemsSold Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employee         Employee @relation(fields: [employeeId], references: [id])
  store            Store    @relation(fields: [storeId], references: [id])

  @@map("shift_handovers")
}

// Enums
enum UserRole {
  USER
  ADMIN
}