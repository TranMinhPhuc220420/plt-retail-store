import { Controller, Post, Body, Req, UseGuards, Get, UnauthorizedException } from '@nestjs/common';
import { AuthService } from '@/modules/auth/auth.service';
import { FirebaseAuthGuard } from './guards/firebase-auth.guard';
import { User, UserFirebase } from '@/interfaces';

import { validateFormRegistration } from '@/utils/validate';
import { AVATAR_DEFAULT } from '@/config';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  async register(@Body() body: any) {
    // Validate the input data here if necessary
    const user:User = validateFormRegistration(body);
    if (!user) {
      throw new UnauthorizedException('invalid_registration_data');
    }

    // Proceed with registration
    const existingUser = await this.authService.getUserByUsername(user.username);
    if (existingUser) {
      throw new UnauthorizedException('username_already_exists');
    }
    const existingEmail = await this.authService.getUserByEmail(user.email);
    if (existingEmail) {
      throw new UnauthorizedException('email_already_exists');
    }
    
    // Register the user
    user.id = ''; // ID will be generated by the database, or you can set it
    user.avatar = user.avatar || ''; // Ensure avatar is optional
    user.password = user.password || ''; // Password is optional for OAuth users

    return this.authService.register(body);
  }

  // @UseGuards(LocalAuthGuard)
  @Post('login')
  async login(@Req() req, @Body() body: any) {
    const user = await this.authService.validateUser(body.username, body.password);
    if (!user) {
      throw new UnauthorizedException('Invalid credentials');
    }
    return this.authService.login(user);
  }

  @UseGuards(FirebaseAuthGuard)
  @Post('google-verify-token')
  async googleAuth(@Req() req, @Body() body: any) {
    const userFirebase : UserFirebase = req.user;
    console.log(userFirebase);
    
    if (!userFirebase) {
      throw new UnauthorizedException('Invalid Google token');
    }

    let userExist = await this.authService.getUserByUsername(userFirebase.email);

    if (!userExist) {
      // Register the user if they do not exist
      const user: User = {
        id: userFirebase.uid,
        email: userFirebase.email,
        username: userFirebase.email,
        avatar: userFirebase.picture || AVATAR_DEFAULT,
        fullname: userFirebase.name || '',
        password: '',
      };

      await this.authService.register(user);

      // Fetch the newly created user
      userExist = await this.authService.getUserByUsername(userFirebase.email);
    }

    return this.authService.login(userExist);
  }

  @Post('logout')
  async logout() {
    // For JWT, logout is handled on the client by deleting the token.
    // You can implement token blacklisting here if needed.
    return { message: 'Logged out successfully' };
  }
}
